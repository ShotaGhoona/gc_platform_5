"""add story column to tier

Revision ID: 1a57f9542f35
Revises: 
Create Date: 2025-05-23 22:49:18.768138

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1a57f9542f35'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('morning_event_tags')
    op.drop_table('event_participants')
    op.drop_table('attendance_flags')
    op.drop_table('profile_sns')
    op.drop_table('external_event_tags')
    op.drop_table('attendances')
    op.drop_table('profile_core_skill')
    op.drop_table('user_tiers')
    op.drop_table('morning_event_on_tags')
    op.drop_table('tiers')
    op.drop_table('external_event_on_tags')
    op.drop_table('profile_interest')
    op.drop_table('profiles')
    op.drop_table('system_notice_on_tags')
    op.drop_table('morning_events')
    op.drop_table('sns')
    op.drop_table('interests')
    op.drop_table('external_events')
    op.drop_table('users')
    op.drop_table('core_skills')
    op.drop_table('monthly_goals')
    op.drop_table('system_notice_tags')
    op.drop_table('system_notices')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_notices',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('system_notices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('publish_start_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('publish_end_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_notices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('system_notice_tags',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('system_notice_tags_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_notice_tags_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('monthly_goals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('goal_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('monthly_start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('fb', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='monthly_goals_pkey')
    )
    op.create_table('core_skills',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('core_skills_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='core_skills_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('clerk_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('clerk_id', name='users_pkey'),
    sa.UniqueConstraint('discord_id', name='users_discord_id_key'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('external_events',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('external_events_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('host_user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['host_user_id'], ['users.clerk_id'], name='external_events_host_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='external_events_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('interests',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('interests_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='interests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sns',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sns_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sns_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('morning_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('host_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['host_user_id'], ['users.clerk_id'], name='morning_events_host_user_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.clerk_id'], name='morning_events_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='morning_events_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('system_notice_on_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('system_notice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('system_notice_tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['system_notice_id'], ['system_notices.id'], name='system_notice_on_tags_system_notice_id_fkey'),
    sa.ForeignKeyConstraint(['system_notice_tag_id'], ['system_notice_tags.id'], name='system_notice_on_tags_system_notice_tag_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='system_notice_on_tags_pkey')
    )
    op.create_table('profiles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('profiles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('vision', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('bio', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('one_line_profile', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('background', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('avatar_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.clerk_id'], name='fk_profiles_user', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='profiles_pkey'),
    sa.UniqueConstraint('user_id', name='uq_profiles_user'),
    postgresql_ignore_search_path=False
    )
    op.create_table('profile_interest',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interest_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['interest_id'], ['interests.id'], name='profile_interest_interest_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], name='profile_interest_profile_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('profile_id', 'interest_id', name='profile_interest_pkey')
    )
    op.create_table('external_event_on_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('external_event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('external_event_tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['external_event_id'], ['external_events.id'], name='external_event_on_tags_external_event_id_fkey'),
    sa.ForeignKeyConstraint(['external_event_tag_id'], ['external_event_tags.id'], name='external_event_on_tags_external_event_tag_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='external_event_on_tags_pkey')
    )
    op.create_table('tiers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tiers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title_en', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('title_ja', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('badge_color', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('card_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('short_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('long_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('story', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tiers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('morning_event_on_tags',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['morning_events.id'], name='morning_event_on_tags_event_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['morning_event_tags.id'], name='morning_event_on_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='morning_event_on_tags_pkey'),
    sa.UniqueConstraint('event_id', 'tag_id', name='morning_event_on_tags_event_id_tag_id_key')
    )
    op.create_table('user_tiers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('granted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tier_id'], ['tiers.id'], name='user_tiers_tier_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.clerk_id'], name='user_tiers_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_tiers_pkey'),
    sa.UniqueConstraint('user_id', 'tier_id', name='user_tiers_user_id_tier_id_key')
    )
    op.create_table('profile_core_skill',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('core_skill_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['core_skill_id'], ['core_skills.id'], name='profile_core_skill_core_skill_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], name='profile_core_skill_profile_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('profile_id', 'core_skill_id', name='profile_core_skill_pkey')
    )
    op.create_table('attendances',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('discord_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('channel', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='attendances_pkey')
    )
    op.create_table('external_event_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='external_event_tags_pkey')
    )
    op.create_table('profile_sns',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sns_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], name='profile_sns_profile_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sns_id'], ['sns.id'], name='profile_sns_sns_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('profile_id', 'sns_id', name='profile_sns_pkey')
    )
    op.create_table('attendance_flags',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('six_clock_flag', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.clerk_id'], name='attendance_flags_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='attendance_flags_pkey')
    )
    op.create_table('event_participants',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['morning_events.id'], name='event_participants_event_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.clerk_id'], name='event_participants_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='event_participants_pkey'),
    sa.UniqueConstraint('event_id', 'user_id', name='event_participants_event_id_user_id_key')
    )
    op.create_table('morning_event_tags',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='morning_event_tags_pkey')
    )
    # ### end Alembic commands ###
